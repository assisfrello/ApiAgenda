// <auto-generated />
using System;
using ApiAgenda.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ApiAgenda.Data.Migrations
{
    [DbContext(typeof(AgendaContext))]
    [Migration("20240119145714_AgendaInclusaoCampos")]
    partial class AgendaInclusaoCampos
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ApiAgenda.Domain.Entities.Agenda", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DataAtualizacao")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DataCadastro")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Documento")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Agenda");
                });

            modelBuilder.Entity("ApiAgenda.Domain.Entities.AgendaContato", b =>
                {
                    b.Property<int>("IdAgenda")
                        .HasColumnType("integer");

                    b.Property<string>("Celular")
                        .IsRequired()
                        .HasColumnType("varchar(15)");

                    b.Property<string>("Email")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Telefone")
                        .HasColumnType("varchar(15)");

                    b.HasKey("IdAgenda");

                    b.ToTable("AgendaContato");
                });

            modelBuilder.Entity("ApiAgenda.Domain.Entities.AgendaEndereco", b =>
                {
                    b.Property<int>("IdAgenda")
                        .HasColumnType("integer");

                    b.Property<string>("Bairro")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Cidade")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Complemento")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Logradouro")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Numero")
                        .HasColumnType("varchar(8)");

                    b.Property<string>("Uf")
                        .IsRequired()
                        .HasColumnType("varchar(2)");

                    b.HasKey("IdAgenda");

                    b.ToTable("AgendaEndereco");
                });

            modelBuilder.Entity("ApiAgenda.Domain.Entities.AgendaContato", b =>
                {
                    b.HasOne("ApiAgenda.Domain.Entities.Agenda", "Agenda")
                        .WithOne("Contato")
                        .HasForeignKey("ApiAgenda.Domain.Entities.AgendaContato", "IdAgenda")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Agenda");
                });

            modelBuilder.Entity("ApiAgenda.Domain.Entities.AgendaEndereco", b =>
                {
                    b.HasOne("ApiAgenda.Domain.Entities.Agenda", "Agenda")
                        .WithOne("Endereco")
                        .HasForeignKey("ApiAgenda.Domain.Entities.AgendaEndereco", "IdAgenda")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Agenda");
                });

            modelBuilder.Entity("ApiAgenda.Domain.Entities.Agenda", b =>
                {
                    b.Navigation("Contato");

                    b.Navigation("Endereco");
                });
#pragma warning restore 612, 618
        }
    }
}
